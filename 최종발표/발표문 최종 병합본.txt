//////////////////////////////////////////////////////////////////////////////// 박준현
안녕하세요 차 쇼핑몰 중간 프로젝트를 개발한 팀 TryChaters입니다
======> 다음 페이지

발표는 프로젝트 개요 및 구조도 설명을 시작으로
주요 기능 별 설명 및 코드 시연을 하는 방식으로 진행됩니다.
그 후 오류 원인 및 해결 사항을 보여드린 뒤에
MVC 패턴별 장점을 말씀드리고 소감 및 Q&A 후 마치도록 하겠습니다
======> 다음 페이지

[팀원 소개]
다음은 팀원 소개를 해드리겠습니다.
======> 다음 페이지

저희 팀은 팀장: 박준현
팀원: 권지현, 류준원, 김지훈, 정윤구, 탄다미로 이루어져 있으며
다음과 같이 컨트롤 1명, 모델 2명, 뷰 3명으로 파트 분배를 하였습니다.

지금 발표를 여는 저는 팀장 박준현이며
주요 기능 파트 발표는 권지현 팀원이
오류원인 및 해결 과 특장점, 그리고 개선사항 파트는 정윤구 팀원이 발표할 예정입니다
======> 다음 페이지

[프로젝트 개요 & 구조도]
이제 본격적으로 프로젝트 개요로 넘어가도록 하겠습니다
저희 프로젝트의 개요는 다음과 같습니다
======> 다음 페이지

먼저 기획 배경은
JAVA와 JSP, 그리고 MySQL 기반의 MVC 패턴을 이용한 차 구매 웹페이지 구현하는 것이며
기획 목적은  홈페이지 이용자에게 있어서 최대한의 편의성 (UI/UX) 보장 및 원활한 서비스를 제공하는 것입니다
기대효과로는
	: 전반적인 JAVA, JSP, MySql에 대한 심층적 이해 및 활용도 향상,
 	: JSP를 이용한 동적 웹사이트 구축 및 MVC 패턴 학습 극대화,
	: 깃(Git)을 통한 팀원들의 업데이트 사항 실시간 반영 및 수정 용이
3가지의 항목이 있습니다

기능은 간략히 말씀드리자면
첫번째로 회원가입/로그인/로그아웃/회원정보 변경등의 회원 관련 기능
두번째로 카테고리별 과/키워드 별 상품 검색
세번째로 장바구니(담기, 삭제, 비우기, 수량조절에 따른 금액 변동, 결제한 상품 다시담기) 등이 있으며
이후로는 찜, 주문하기, 결제, 리뷰 와 같은 기능이 있습니다

/*
1. 회원가입/로그인/로그아웃/회원정보 변경등의 회원 관련 기능
2. 상품 검색(카테고리별/키워드 검색)
3. 장바구니(담기, 삭제, 비우기, 수량조절에 따른 금액 변동, 다시담기)
4. 찜
5. 주문하기
6. 결제
7. 리뷰
*/

또한 개발환경은 이클립스, MySql을 사용하였고
개발 과정에 있어 디스코드로는(소통)을 하고, 깃으로는 코드와 파일을(공유) 하였습니다
======> 다음 페이지

프로젝트 기획일정으로는
1주차에는 주로 주제 회의 및 설계를 하였고
2주차에 MVC 패턴을 활용하여 설계 구체화 후 실제 코드 작업을 시작하습니다
그리고 3주차에 실질적 개발과 테스트 및 오류수정을 하였습니다
======> 다음 페이지

[구조도]
다음으로는 프로젝트의 구조입니다
먼저 ERD를 통하여 데이터와 관계들을 살펴보도록 하겠습니다

- ERD(연결 / 중요 FK / 제약조건)
저희 프로젝트의 테이블은 총 8개로 구성되어 있으며
각각 회원, 상품, 주문, 주문상세, 결제, 후기, 찜, 이미지 테이블이 있습니다

(상품-이미지)
상품 테이블은 상품번호를 PK로 가지며
상품이름, 상품가격, 상품재고, 카테고리, 상품설명을 가지고 있습니다
상품 이미지는 하나의 상품에 여러개가 될 수 있기+ 때문에
별도의 테이블로 분리하여 관리하도록 하였습니다
======> 다음 페이지

(회원-찜-상품)
위시리스트 테이블은 회원의 PK인 아이디와 상품의 PK인 상품번호를 저장하여
어떠한 회원이 어떤 상품을 구매할건지 알 수 있도록 설계하였습니다
추후 회원이 탈퇴할 경우 해당 위시리스트 정보는 필요하지 않기 때문에
CASCADE 옵션으로 같이 삭제되도록 하였습니다
======> 다음 페이지

/*어떠한 상품을 추후에 구매하고 싶을 때 저장할 수 있도록 제공 */


(회원- 주문- 주문상세-상품) + 결제
회원이 주문을 할 경우 하나의 주문에 여러 상품을 주문할 수 있기 때문에
주문 상세로 테이블을 분리하여 관리토록 하였습니다
결제는 배송에 따른 문제를 고려하여 별도의 연결을 하지 않았습니다
======> 다음 페이지

(회원-후기)
회원은 주문상세에 따라 하나의 후기를 작성할 수 있게 하였습니다
======> 다음 페이지

다음으론 유저 플로우차트로 프로그램의 흐름을 살펴보도록 하겠습니다

- FLOWCHART
먼저 로그인 여부에 따라 나뉘게 됩니다
비로그인 상태에서는
로그인 / 회원 가입을 진행할 수 있으며
상품 목록과 후기들을 열람할 수 있고 오시는 길 페이지 또한 이용할 수 있습니다
======> 다음 페이지

회원이 로그인 상태일 경우
회원 정보와 비밀번호를 변경할 수 있게 됩니다
======> 다음 페이지

또한 회원은 상품을 상품 목록과 상품 상세 페이지에서 위시리스트에 등록 및 삭제와 장바구니에 담을 수 있습니다
회원이 장바구니에 담아 주문을 진행하게 되면 결제 후 주문내역에 해당 정보가 저장되고
마이페이지의 주문내역에서 확인할 수 있으며 해당 후기를 작성 및 수정, 삭제할 수 있습니다
======> 다음 페이지

다음은 로직 프로세스입니다
저희 프로젝트의 중점적인 부분 위주로 구성되어있습니다

- 로직 프로세스
(+ 장바구니(세션)->주문->결제)
먼저 상품을 담는 장바구니는 세션으로 이루어져 있는데
사용자가 선택된 상품과 구매할 개수가 담기게 됩니다
사용자는 장바구니 페이지에서 주문을 할 수 있으며
결제 API로 결제 후 주문과 주문상세, 결제 테이블이 INSERT 및 UPDATE가 되며
안내 후 메인화면으로 이동하게 됩니다
======> 다음 페이지


이상으로 구조도 발표를 마치겠습니다
======> 다음 페이지

//////////////////////////////////////////////////////////////////////////////// 권지현
//////////////////////////////////////////////////////////////////////////////// 권지현
//////////////////////////////////////////////////////////////////////////////// 권지현

주요 기능 발표를 맡게된 권지현입니다
먼저 저희 프로젝트의 주요 기능으로는

1. 회원가입/로그인/로그아웃/회원정보 변경등의 회원 관련 기능
2. 상품 목록 / 상세와 검색(카테고리별/키워드 검색)
3. 장바구니(담기, 삭제, 비우기, 수령조절에 따른 금액 조절, 다시담기)
4. 찜
5. 주문
6. 결제
7. 리뷰
가 있습니다

코드 시연 후 해당 기능 설명을 하는 방식으로 진행하도록 하겠습니다

[ 회원 관련 기능 ]

/////*****[코드시연][코드시연][코드시연][코드시연][코드시연][코드시연][코드시연]*****/////
/////*****[코드시연][코드시연][코드시연][코드시연][코드시연][코드시연][코드시연]*****/////
/////*****[코드시연][코드시연][코드시연][코드시연][코드시연][코드시연][코드시연]*****/////

먼저 회원 관련 기능 코드 시연하도록 하곘습니다

회원가입
아이디/ 비밀번호/이름은 필수 입력값이며 주소와 연락처는 그렇지 않습니다
주소 API를 통하여 주소를 입력할 수 있습니다

로그인
제가 앞서 가입했던 정보로 로그인이 가능하며 로그인시 해당정보는 세션에 저장됩니다
틀린 정보를 입력하게 되면 해당 안내창이 출력됩니다

회원정보 변경
회원정보 변경 항목에 들어오면
제가 가입시 입력했던 정보가 set 되어 있는것을 볼 수 있습니다
회원정보 변경은 아이디를 제외한 정보를 변경할 수 있습니다
(변경)

로그아웃
로그아웃시 세션에 저장된 정보를 삭제하며 로그아웃 됩니다


///***기능 설명을 하도록 하겠습니다***///
///***기능 설명을 하도록 하겠습니다***///
///***기능 설명을 하도록 하겠습니다***///
PPT 회원1
회원가입과 로그인 / 로그아웃 / 회원정보 변경 등의 기능이 있습니다
회원은 중복되지 않은 아이디로 회원가입이 가능합니다
해당화면에서는 회원가입시 유효성 검사를 하는 코드입니다
해당 유효성에는 비밀번호와 비밀번호 확인 입력이 같아야 하며
비밀번호는 8글자 이상이어야 합니다
또한 연락처와 주소는 필수 입력값이 아니기 떄문에 입력하지 않아도 되지만
연락처의 경우 하이픈 제외 11자리의 숫자이어야 하며
이메일의 경우 @를 포함해야 합니다

PPT 회원2
또한 주소는 다음 주소 API로 입력을 받도록 하였습니다
팝업창으로 해당 API가 보여지게 되며 선택된 주소가 폼으로 자동으로 입력되게 됩니다


[상품 목록 / 상세 / 검색(카테고리별/키워드 검색)]

다음은 상품 목록과 상세 그리고 검색입니다
먼저 실행화면을 보여드리도록 하겠습니다

/////*****[코드시연][코드시연][코드시연][코드시연][코드시연][코드시연][코드시연]*****/////
/////*****[코드시연][코드시연][코드시연][코드시연][코드시연][코드시연][코드시연]*****/////
/////*****[코드시연][코드시연][코드시연][코드시연][코드시연][코드시연][코드시연]*****/////

상품 목록으로 이동시 전체 상품이 출력되게 됩니다
상품의 카테고리를 선택시 해당되는 상품/차들만 출력되게 됩니다
상품 검색시 해당 키워드가 포함되는 상품들이 출력되게 되며
상품들은 페이징 처리를 통해 보여지게 됩니다

///***기능 설명을 하도록 하겠습니다***///
해당 쿼리문은 상품 목록을 출력하는 SQL문 입니다
상품 정보를 불러오며 카테고리와 이름을 LIKE문 처리로 해당 값이 포함될시 출력되도록 하였습니다
또한 조인을 통하여 이미지를 불러오는 이유는 상품 정보를 가져올때
상품 대표 이미지를 같이 가져와야 하는 경우가 압도적으로 많기 때문에
IMAGE_DIVISION이라는 칼럼으로 해당 이미지의 종류를 파악하여 함께 가져오도록 하였습니다

또한 이러한 차 상품들은 LIMIT 쿼리를 통해 페이징 처리하여 보여지며
해당 정보는 컨트롤러에서 처리 후 Model로 보내지게 됩니다

[ 장바구니 ]

/////*****[코드시연][코드시연][코드시연][코드시연][코드시연][코드시연][코드시연]*****/////
/////*****[코드시연][코드시연][코드시연][코드시연][코드시연][코드시연][코드시연]*****/////
/////*****[코드시연][코드시연][코드시연][코드시연][코드시연][코드시연][코드시연]*****/////
다음은 장바구니 기능입니다
장바구니는 상품 목록과 상세에서 모두 추가가 가능합니다
먼저 방금 가입하였기 떄문에 장바구니에 아무 상품이 없는 것을 확인할 수 있습니다
상품 목록에서 장바구니 추가시 1개씩 추가되는 것을 볼 수 있습니다
또한 상품 상세에서 추가시 수량을 선택하여 추가할 수 있습니다
++하나더 추가(목록에서)

장바구니 페이지에서 수량 변경시 가격 또한 함꼐 바뀌는 것을 볼 수 있습니다
"x 아이콘"을 누를시 해당 상품이 삭제되며
"장바구니 비우기" 버튼을 클릭시 전체 장바구니가 비워집니다

///***기능 설명을 하도록 하겠습니다***///
장바구니는 세션으로 이루어져 있으며
상품 목록과 상품 상세에서 추가가 가능합니다
상품은 ArrayList<TeaVO> 형태로 세션에 저장되며 장바구니 페이지로 이동하게 됩니다
장바구니 페이지에서는 상품 삭제, 상품 수량 조절, 장바구니 전체 비우기의 행동이 가능하며
해당 액션은 모두 비동기처리로 구현하였습니다



1. 상품삭제
해당 상품의 x 아이콘을 누를 시 상품번호와 상품 단건 삭제를 의미하는 cartAction 0 데이터가
JSON 형식으로 장바구니 서블릿으로 전송되게 됩니다
서블릿에서 성공적으로 세션 삭제가 이루어지면
해당 부분의 HTML을 삭제 처리하여 실제 저희가 보는 화면에 반영합니다

2. 구매 개수 변경
상품의 개수에 변경이 감지되면 
미리 selectOne을 통해 받아온 쇼핑몰 DB(데이터베이스)에 존재하는 해당 상품의 재고와 비교 후
재고를 변경하게 됩니다
이때 재고보다 많은 수량을 입력할시 해당 상품의 재고로, 1보다 작은 수를 입력시 1로 값을 변경하도록 합니다
변경할 재고는 서블릿을 통해 변경되며
해당 상품의 총 가격을 계산한뒤 값을 변경합니다
변경 사항을 반영하기 위해 마찬가지로 HTML을 삭제 후 추가하여 출력하게 합니다

3. 장바구니 비우기
"장바구니 비우기" 버튼이 클릭되면
장바구니 비우기의 경우 모든 데이터가 삭제 되기 때문에
스윗알랏을 통해 사용자의 확인을 한번 더 거친 후
서블릿을 통해 장바구니 세션을 전체 삭제 처리하여 구현하였습니다

===+++
""""""""""""++장바구니 다시담기 기능은 주문 후 다시 설명 드리도록 하겠습니다++""""""""""""


[ 위시리스트 ]

/////*****[코드시연][코드시연][코드시연][코드시연][코드시연][코드시연][코드시연]*****/////
/////*****[코드시연][코드시연][코드시연][코드시연][코드시연][코드시연][코드시연]*****/////
/////*****[코드시연][코드시연][코드시연][코드시연][코드시연][코드시연][코드시연]*****/////

다음은 위시리스트 찜 기능입니다
찜은 상품 리스트/ 목록과 상품 상세 페이지에서 가능합니다
//
상품 목록에서 찜을 할 경우 스윗 알랏 창으로 안내가 됩니다
상품 상세에서 찜을 할 경우 하트 아이콘을 통해 위시리스트 등록 여부를 확인할 수 있습니다
위시리스트에서는 찜한 상품을 확인 할 수 있으며 해당 제품 페이지로 이동 또한 가능합니다
삭제 버튼을 누를시 찜 목록에서 삭제 됩니다
//


///***기능 설명을 하도록 하겠습니다***///
///***기능 설명을 하도록 하겠습니다***///
///***기능 설명을 하도록 하겠습니다***///

상품 목록에서 하트 버튼이 눌리게 되면 
selectOne을 통하여 사용자가 위시리스트의 등록 여부를 판단한뒤
등록되어 있지 않으면 추가를 등록되어 있으면 삭제를 실행시킵니다

상품 목록에서 상품 상세로 진입시에도
사용자가 selectOne을 통하여 위시리스트에 등록 여부를 판단하여 초기 변수 favor 값을 갖게 됩니다
해당 값은 아이콘 클릭시 서블릿을 통해 데이터베이스에 INSERT 및 DELETE 처리 후
클래스 부여 및 삭제를 하여
아이콘이 그에 맞게 변화하도록 구현하였습니다

[ 주문 ]
/////*****[코드시연]*****/////
주문의 경우 장바구니 페이지에서 "결제하기" 버튼을 누를 시 실행됩니다
제가 장바구니에 추가했던 상품 정보와 함께 주문 페이지로 이동하게 됩니다

///***기능 설명을 하도록 하겠습니다***///
///***기능 설명을 하도록 하겠습니다***///
///***기능 설명을 하도록 하겠습니다***///

사용자가 "결제하기" 버튼을 통해 주문 요청을 하면
세션에 있는 장바구니에 있는 상품들의 종류 수 만큼 반복하여
상품별 총합 가격과 장바구니 전체 가격 합을 계산한뒤
주문 페이지로 이동하게 됩니다


[ 결제 ]

/////*****[코드시연][코드시연][코드시연][코드시연][코드시연][코드시연][코드시연]*****/////
(buy.jsp, paySuccess.jsp, paySuccessAction.java)
실제 주문에서 저장된 금액으로 결제를 할 수 있으며
제 아이디와 결제 정보와 함께 안내 창이 출력되게 됩니다

///***기능 설명을 하도록 하겠습니다***///
///***기능 설명을 하도록 하겠습니다***///
///***기능 설명을 하도록 하겠습니다***///

결제 기능은 토스 페이먼츠 API를 사용하였습니다
계산된 최종 가격을 전달받아 결제API를 통해 처리하게 됩니다
결제가 성공하면 
주문 테이블에 해당 정보를 추가한뒤
주문 상세 테이블에 데이터 추가 및 상품 테이블의 재고를 변경합니다
이떄 주문 상세 테이블의 주문 번호는 해당 사용자의 가장 최신 주문번호 즉, 주문 테이블의 PK를 가져오도록 합니다
결제 정보 또한 마지막으로 데이터베이스(DB)에 추가한뒤
장바구니와 주문 목록이 저장된 세션을 삭제하여 마무리하며
사용자에게 결제 성공 안내 뒤 메인페이지로 이동하도록 합니다

[ 리뷰 ]
/////*****[코드시연][코드시연][코드시연][코드시연][코드시연][코드시연][코드시연]*****/////
/////*****[코드시연][코드시연][코드시연][코드시연][코드시연][코드시연][코드시연]*****/////
/////*****[코드시연][코드시연][코드시연][코드시연][코드시연][코드시연][코드시연]*****/////
제가 앞서 주문 및 결제를 하였기 때문에
해당 정보가 주문내역에 추가된 것을 알 수 있습니다

다시 담기 버튼을 누를시
예전에 구매한 주문내역 그대로 장바구니에 담을 수 있게 기능이 구현되어 있습니다

주문번호를 클릭시 주문상세 목록을 볼 수 있는데
여기서 CKEditor를 활용한 후기작성이 가능합니다
작성한 후기는 수정 및 삭제가 가능하며
한 주문상세번호 당 한번만 작성 가능합니다

또한 전체 후기에서는 리뷰 목록이 페이징처리 되어 나타나며

상품 상세에서는 해당 제품에 대한 리뷰들이 출력되는 것을 볼 수 있습니다
 

///***기능 설명을 하도록 하겠습니다***///
///***기능 설명을 하도록 하겠습니다***///
///***기능 설명을 하도록 하겠습니다***///
1. 리뷰 작성
마이페이지의 주문내역을 통해 후기를 작성할 수 있습니다
selectOne을 통해 해당 주문 상세번호로 작성된 후기가 존재하지 않을시 작성 버튼이 생기며
이미 후기를 작성한 경우에는 "작성완료"라고 표시됩니다
리뷰 작성시 CKEditor 플러그인을 통해 구현하여 다양한 작성폼을 제공합니다

2. 리뷰 페이징 처리
클라이언트로부터 페이지 번호와 검색 키워드 등의 파라미터를 전달 받고
받은 정보를 기반으로 페이지네이션 로직을 이용하여 추출한 데이터를 다시 전달합니다.
이와 같은 방식으로 상품 목록과 리뷰 목록에 구현하였습니다.


3. 리뷰 상품 상세에 출력
상품과 리뷰가 1:N 관계임에 착안하여 ReviewSet 형식을 활용하였습니다
ReviewSet은 상품인 TeaVO와 ArrayList<ReviewVO>를 멤버변수로 가지고 있어
하나의 상품에 여러 리뷰가 존재하는 구조입니다
해당 ReviewSetDAO를 통하여 상품 상세에 해당 상품의 리뷰들이 출력됩니다



이상으로 기능 및 코드시연 발표를 마치겠습니다



//////////////////////////////////////////////////////////////////////////////// 정윤구

[오류 및 해결방안]
안녕하세요, 오류 및 해결방안,Trycatchers의 특장점과 개선사항 발표를 맡은 정윤구입니다.
저희 트라이캐쳐스엔 총 3개의 큰 오류가 있었습니다.
첫번째는 주소 api 사용시 팝업창이 닫히지 않는 오류, 2번째는 장바구니에서 상품 삭제시
선택한 상품이 삭제되는 것이 아닌 엉뚱한 상품이 삭제되는 오류, 3번째는 회원가입시 휴대폰 번호는 필수 입력이 아닌 선택사항이라서 값을 입력하지 않고 회원가입 시도를 하면 
java.lang.NumberFormatException: For input string: "" 이 발생하는 오류였습니다.

[/// 넘기기 ///]

첫번째 오류인 주소 api의 경우입니다. 
보시다시피 jsp 파일내 input 값까지 선택한 주소가 전송되는 데에는 성공했습니다. 허나 팝업창이 닫히지 않아 
수동으로 x버튼을 눌러야 하는 번거로움이 있었습니다.
input id값과 function을 수정해봤으나, 해결되지 않았습니다.

[/// 넘기기 ////]

그러던 중 깃허브에서 kakao가 올린 공식 q&a를 보고 getelementbyid 방식을 쓰면
크롬에서는 오류가 생길 수 있다고 해서 jquery selector 형식으로 바꿨습니다.
사진을 보시면 왼쪽이 getelementbyid, 오른쪽에 제이쿼리 셀렉터입니다.
의도는 같지만, 문법만 다르다고 생각하시면 되겠습니다. 실제로 저 두 사진을 비교하면 문법 부분을
제외하고 다 똑같습니다.

[//// 넘기기 ////]

결국 저렇게 바꾼 결과, 주소를 선택하면 팝업창이 자동으로 닫히는 것을 확인 할 수 있었습니다.

[/// 넘기기 ///]

두 번째 오류는 장바구니에서 상품 삭제시
선택한 상품이 삭제되는 것이 아닌 엉뚱한 상품이 삭제되는 오류인데요, el식과 ajax() 구문에서 오류가 발생했습니다.

[/// 넘기기 ///]

사실 이부분은 아까 권지현 팀원님께서 기능 - 장바구니를 설명하실 때 언급이 됬었는데요,
만약EL 을 안쓰면? 모든 상품의 아이디 선택자가 같다고 인식이 돼서 
원하는 상품을 삭제하는데 어려움이 생긴다는 것이었습니다.
기존의 오류점이 있었던 코드를 보시면,  장바구니에서 
삭제할 상품 번호의 정의가 되어있지 않았다는 것을 알 수 있죠,
그래서 오른쪽의 EL과 ajax()구문을 수정한 결과, 
[/// 넘기기 ///]
정상적으로 상품이 삭제되는 것을 확인 할 수 있었습니다.

[/// 넘기기 ///]

세 번째 오류는 회원가입시 휴대폰 번호는 필수 입력이 아닌 선택사항이라서 값을 입력하지 않고 회원가입 시도를 하면 
java.lang.NumberFormatException: For input string: "" 이 발생하는 오류였습니다
이 또한 앞서 기능 - 회원 부분에서 말씀드렸는데, 아이디, 비번, 비번확인, 이름은 필수사항이고,
연락처, 주소, 이메일은 선택사항이라 입력하지 않아도 회원가입이 가능합니다.
허나 휴대폰 번호를 입력하지 않고 회원가입을 진행하려 한다면,

[/// 넘기기 ///]

java.lang.NumberFormatException: For input string: "" 이 발생했습니다.

[/// 넘기기 ///]

이 오류를 해결하는 과정에서 확인한 것은
휴대폰 번호 자료형을 long 자료형으로 설정했는데 long 자료형은 기본자료형이기 때문에 null 값이 될 수 없고,
해결방안으로 컨트롤러에서 빈 값을 비교하여 임의로 기본값을 부여하거나 null로 초기화가
가능한 참조자료형인 Long 자료형을 사용해야하는데, 저희는
전자를 선택했습니다.

저희 오류와 해결 부분은 여기까지입니다. 

[/// 넘기기 ///]

이제 TryCatchers만의 특장점에 대해 말씀드리겠습니다.
MVC별로 나누어서 설명드리겠습니다.

M
model의 데이터베이스에 접근 및 연결해제 하는 공통부분을
JDBC Util 클래스로 모듈화 하였습니다

BUY 테이블/ BUY_DETAIL 테이블, 이미지 테이블 등에서
테이블을 조인하거나 집계함수, ifnull, groupby 등을 사용하여
보다 더 쉽게 데이터 처리를 가능토록 하였습니다

V
비밀번호 자리수, 전화번호 하이픈, 이메일 등의 유효성 검사를 하였으며
sweetalert을 활용 및  데이터 공백 안내 등으로 UI/UX 및 사용자 편의성을 증대 시켰습니다
JSTL을 활용하여 foreach, if, c:set 등을 활용해 총가격 계산 및 반복 데이터 출력등을 수월하게 처리하였습니다
주소API, 헤드, 히어로, 풋터, 햄버거 등을 커스텀태그로 모듈화하여 가독성을 높이고 응집도를 향상시켰습니다
반응형 템플릿을 적용하여 여러 디바이스에서도 호환되는 서비스 제공을 가능토록 하였습니다
JS / jQuery 동작 등으로 유효성 검사 및 비동기처리를 구현하였습니다

C
필터를 활용하여 인코딩(UTF-8) 처리를 하였습니다
서블릿을 활용하여 컨트롤러를 자바로 분리하였으며 비동기 처리 구현을 하였습니다

또한 저희 Trycatchers의 MVC의 다양한 특장점은, MVC 간의 유기적인 협업과 각자의 충실한 역할 수행이 시너지를
극대화 시켰다고 말씀드릴 수 있겠습니다.

다음으로 개선사항에 대해 말씀드리겠습니다.

[/// 넘기기 ///]

저희의 개선사항은 팀원 모두가 공통적으로 언급한 부분을 알려드리곘습니다.

첫 번째, 현재 도로명 주소만 적용되나 배송 기능 추가를 염두하고 수정할 예정입니다.
배송은 저희가 최종 프로젝트에 넣을 예정인 기능이기 때문입니다.

두 번째, 현재 장바구니 추가와 장바구니에 다시 담기 코드가 중복되어 해당 공통 부분 클래스로 모듈화를
진행시키겠습니다. 유지보수를 더욱 용이하게 하는 아주 중요한 작업이죠.

세 번째, 회원가입 유효성에 정규식을 추가하는 것입니다.
정규식을 더 다듬고, 세세한 부분까지 체크하여 유효성 부분에서 흠집이 절대 날 수 없게 할 예정입니다.

네 번째, 결제 API가 jsp로 구현되어 있지만 MVC 패턴에 맞게 자바/서블릿으로 분리하여 MVC 개념을 더욱
확고히 익힐 수 있도록 할 예정입니다.

다섯 번쨰, 상품목록에서 위시리스트 등록에 대한 UI/UX를 추가하여 사용자에게 보다 더 큰 편의성을 제공하
고자 합니다.

제일 중요한 6번째 입니다. 저희가 깃을 계속 쓰고 있지만, 깃만큼 MVC 각 파트별로 코드를 취합하고 공유하는 데
있어서 편리한 것이 없습니다. 허나 깃에 익숙하지 않아서 머지 충돌, commit 오류 등 아직 미흡한 부분이 많았습니다.
이 부분은 저희가 계속 사용하면서 능숙하게 사용할 수 있을 때 까지 꾸준하게 노력할 것이며, 작업 시간을 더욱
단축시킬 수 있는 중요한 토대로 만들겠습니다.

마지막으로 소감과 질의응답 부분입니다.

[/// 넘기기 ///]

소감은 대표로 제 소감을 말씀드리겠습니다.
- 소감 쭈루룩 읽기 - + 팀원들한테 압도적 감사
질문 있으신분은 질문 부탁드립니다!!
----- 질의응답 시간 ------
질문이 더 없으시다면, 이것으로 발표를 마치겠습니다

[/// 넘기기 ///]
저희 TryCatchers 발표를 들어주셔서 정말 감사드립니다.


---------------------------------------------------------------------------------
일단 클라이언트로부터 현재 페이지 번호를 전달 받는데 전달 받은 값이 없다면 목록 페이지에 처음 들어가는 것 이므로 현재 페이지가 1로 설정됩니다.

totalCnt와 pageSize를 이용하여 전체 아이템 수에 대한 총 페이지 수(totalPageCnt)를 계산합니다. 페이지 크기인 pageSize로 나누어 떨어지지 않는 나머지 아이템이 있다면 추가적으로 1 페이지를 더 생성합니다.

currentPage와 pageBlock 크기를 이용하여 현재 페이지에 대한 startPage를 계산합니다. pageBlock은 페이지네이션 블록에 표시될 페이지 수를 나타냅니다. currentPage를 pageBlock으로 나누고 소수점 이하를 버린 후, pageBlock의 배수로 조정하여 적절한 시작 페이지를 찾습니다.

endPage는 startPage에 pageBlock - 1을 더해서 계산됩니다. 이로써 페이지네이션 블록이 올바른 페이지 범위를 포함하게 됩니다.

만약 endPage가 totalPageCnt를 초과한다면, endPage를 totalPageCnt로 설정합니다. 이 단계에서 페이지네이션 블록의 마지막 페이지가 전체 페이지 수를 초과하지 않도록 보장합니다.

startRnum과 endRnum을 계산하여 현재 페이지에 출력될 행(row)의 범위를 결정합니다. startRnum은 시작 행 번호를, endRnum은 끝 행 번호를 나타냅니다.

다음 두 줄에서 startRnum과 endRnum이 다시 계산되는데, 이 부분은 중복된 부분으로 보입니다. 앞서 계산된 startRnum과 endRnum이 덮어써지는 오류가 있는 것 같습니다.

만약 endRnum이 전체 아이템 수인 totalCnt를 초과한다면, endRnum을 totalCnt로 설정합니다. 이 단계에서 현재 페이지에 출력되는 마지막 행 번호가 전체 아이템 수를 초과하지 않도록 보장합니다.


<c:if> 태그를 사용하여 startPage가 1보다 큰 경우를 확인합니다. startPage가 1보다 크면 이전 페이지로 이동할 수 있는 화살표 모양의 링크를 생성합니다.
<c:forEach> 태그를 사용하여 startPage부터 endPage까지의 페이지 번호를 반복하여 표시합니다.
<c:if> 태그를 사용하여 endPage가 totalPageCnt보다 작은 경우를 확인합니다. endPage가 totalPageCnt보다 작으면 다음 페이지로 이동할 수 있는 화살표 모양의 링크를 생성합니다
---------------------------------------------------------------------------------
















































